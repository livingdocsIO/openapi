{
  "openapi": "3.0.3",
  "info": {
    "description": "This is to quickly test the Livingdocs Public API. First create a project on [Livingdocs](edit.livingdocs.io). Then create a API token for that project. Use the token to authorize your requests. You can find out more about Livingdocs [http://livingdocs.io](http://livingdocs.io). ",
    "version": "1.0.0",
    "title": "Livingdocs Service",
    "termsOfService": "http://livingdocs.io/terms/",
    "contact": {
      "email": "team@livingdocs.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "Project",
      "description": "Project",
      "externalDocs": {
        "description": "Docs",
        "url": "docs.livingdocs.io/reference-docs/public-api/project/"
      }
    },
    {
      "name": "Composition API",
      "description": "",
      "externalDocs": {
        "description": "Docs",
        "url": "docs.livingdocs.io/reference-docs/public-api/composition-api/"
      }
    },
    {
      "name": "Publications",
      "description": "Publications",
      "externalDocs": {
        "description": "Docs",
        "url": "docs.livingdocs.io/reference-docs/public-api/publications/"
      }
    },
    {
      "name": "Search",
      "description": "Search",
      "externalDocs": {
        "description": "Docs",
        "url": "docs.livingdocs.io/reference-docs/public-api/search/"
      }
    },
    {
      "name": "Document Lists",
      "description": "",
      "externalDocs": {
        "description": "Docs",
        "url": "docs.livingdocs.io/reference-docs/public-api/document-lists/"
      }
    },
    {
      "name": "Document Categories",
      "description": "",
      "externalDocs": {
        "description": "Docs",
        "url": "docs.livingdocs.io/reference-docs/public-api/document-categories/"
      }
    },
    {
      "name": "Routing",
      "description": "Routing",
      "externalDocs": {
        "description": "Docs",
        "url": "docs.livingdocs.io/reference-docs/public-api/routing/"
      }
    },
    {
      "name": "Media Library",
      "description": "Media Library",
      "externalDocs": {
        "description": "Docs",
        "url": "docs.livingdocs.io/reference-docs/public-api/media-library/"
      }
    },
    {
      "name": "Imports",
      "description": "Imports",
      "externalDocs": {
        "description": "Docs",
        "url": "docs.livingdocs.io/reference-docs/public-api/imports/"
      }
    },
    {
      "name": "Sitemaps",
      "description": "Sitemaps",
      "externalDocs": {
        "description": "Docs",
        "url": "docs.livingdocs.io/reference-docs/public-api/sitemaps/"
      }
    },
    {
      "name": "Health",
      "description": "Check API status",
      "externalDocs": {
        "description": "Docs",
        "url": "docs.livingdocs.io/reference-docs/public-api/status/"
      }
    },
    {
      "name": "Add Delivery Status",
      "description": "",
      "externalDocs": {
        "description": "Docs",
        "url": "docs.livingdocs.io/reference-docs/public-api/add-delivery-status/"
      }
    }
  ],
  "paths": {
    "/api/v1/project": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "public-api:read"
            ]
          }
        ],
        "tags": [
          "Project"
        ],
        "summary": "Get Project Configuration",
        "description": "Your AccessToken is valid for a single project. This endpoint tells you the details and configuration of this project.",
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v1/channels": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "public-api:read"
            ]
          }
        ],
        "tags": [
          "Project"
        ],
        "summary": "Get Default Channel Configuration",
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v1/channels/{channelHandle}": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "public-api:read"
            ]
          }
        ],
        "tags": [
          "Project"
        ],
        "summary": "Get Channel Configuration",
        "parameters": [
          {
            "name": "channelHandle",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v1/design": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "public-api:read"
            ]
          }
        ],
        "tags": [
          "Project"
        ],
        "summary": "Get Current Design",
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v1/design/{designVersion}": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "public-api:read"
            ]
          }
        ],
        "tags": [
          "Project"
        ],
        "summary": "Get Specific Design",
        "parameters": [
          {
            "name": "designVersion",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v1/publications/search": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "public-api:read"
            ]
          }
        ],
        "tags": [
          "Search"
        ],
        "summary": "Search Publications",
        "parameters": [
          {
            "name": "search",
            "description": "Search term to perform a full-text search with. For exact word matches use “, e.g. `search=“Ukulele”`",
            "in": "query",
            "schema": {
              "type": "string",
              "example": ""
            }
          },
          {
            "name": "categories",
            "description": "Comma separated list of category ids for which documents should be found. Categories are concatenated with OR. Example: `sport,fashion`",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "sport,fashion"
            }
          },
          {
            "name": "languages",
            "description": "Comma separated list of languages for which documents should be found. Languages are concatenated with OR. Example: `en,de`",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "en,de"
            }
          },
          {
            "name": "languageGroupId",
            "description": "A GroupId used to fetch all translations of a document Using the ?languages param a document in a specific language can be fetched. Example: `?languageGroupId=47?language=de`",
            "in": "query",
            "schema": {
              "type": "string",
              "example": ""
            }
          },
          {
            "name": "contentTypes",
            "description": "Comma separated list of content-types for which documents should be found. Content types are concatenated with OR. Example: `article,author`",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "regular,author"
            }
          },
          {
            "name": "fields",
            "description": "Filters which (comma separated) properties are included in the response. Defaults to `systemdata,metadata,content` (no renditions). Use `id` if you only want to retrieve the ids of the published documents. Useful (and faster) if you are fully synchronizing your frontend with the publication events.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "systemdata,metadata,content"
            }
          },
          {
            "name": "limit",
            "description": "A limit for how much published documents to retrieve. Defaults to 10. Max. 100.",
            "in": "query",
            "schema": {
              "type": "integer",
              "minLength": 0,
              "maxLength": 100,
              "example": 10
            }
          },
          {
            "name": "offset",
            "description": "An offset into the query. Useful when getting more than 100 results (pagination)",
            "in": "query",
            "schema": {
              "type": "integer",
              "example": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v1/document-lists/{id}": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "public-api:read"
            ]
          }
        ],
        "tags": [
          "Document Lists"
        ],
        "summary": "Get List by Id",
        "parameters": [
          {
            "name": "id",
            "description": "List Id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "reverse",
            "description": "Pass `reverse=false` to get the list in the same order as you see it in the editor. (the default is reverse=true for backwards compatibility reasons)",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": "true"
            }
          },
          {
            "name": "fields",
            "description": "Filters which (comma separated) document properties are included in the response. Defaults to `systemdata,metadata` also accepts `content` (no renditions).",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "systemdata,metadata"
            }
          },
          {
            "name": "limit",
            "description": "A limit for how much documents to resolve for the requested list. Defaults to 100. Max. 100.",
            "in": "query",
            "schema": {
              "type": "integer",
              "minLength": 0,
              "maxLength": 100,
              "example": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v1/document-lists": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "public-api:read"
            ]
          }
        ],
        "tags": [
          "Document Lists"
        ],
        "summary": "Get Lists",
        "parameters": [
          {
            "name": "name",
            "description": "Filters the result set and allows searching by list name.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "description": "A limit for how much documents to resolve for the requested list. Defaults to 10. Max. 100.",
            "in": "query",
            "schema": {
              "type": "integer",
              "minLength": 0,
              "maxLength": 100,
              "example": 10
            }
          },
          {
            "name": "offset",
            "description": "An offset into the query. Useful when getting more than 100 results (pagination).",
            "in": "query",
            "schema": {
              "type": "integer",
              "example": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v1/categories/{categoryId}": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "public-api:read"
            ]
          }
        ],
        "tags": [
          "Document Categories"
        ],
        "summary": "Get a Category with all Information",
        "description": "You need to activate the Categories / Routing Feature in the Project Config in order to query categories.",
        "parameters": [
          {
            "name": "categoryId",
            "description": "Id of a specific categories as fetched from the /categories endpoint.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inheritMetadata",
            "description": "If set to `true` will inherit (but not overwrite) metadata properties from all parents Inheritance depth is limited to 20.",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": "false"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v1/categories": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "public-api:read"
            ]
          }
        ],
        "tags": [
          "Document Categories"
        ],
        "summary": "Get Categories for a Project",
        "description": "You need to activate the Categories / Routing Feature in the Project Config in order to query categories.",
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v1/documents/{documentId}/addDeliveryStatus": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "public-api:write"
            ]
          }
        ],
        "tags": [
          "Add Delivery Status"
        ],
        "summary": "Add Delivery Status",
        "description": "This endpoint allows to provide updates for a document/publication regarding its status in an external delivery system (e.g. page build status in a static site generator). The response is a JSON object including the `reportId`.",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "Id of the document",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "reportId": "2SG2MAA9RwPn",
                  "projectId": 1,
                  "documentId": 1,
                  "publicationId": 524,
                  "deliveryHandle": "web",
                  "status": "success",
                  "message": "Message with <strong>html</strong>"
                },
                "properties": {
                  "reportId": {
                    "type": "string",
                    "description": "If provided this will update the record, otherwise it will create a new one with a new reportId"
                  },
                  "projectId": {
                    "type": "string"
                  },
                  "documentId": {
                    "type": "string"
                  },
                  "publicationId": {
                    "type": "string",
                    "description": "required"
                  },
                  "deliveryHandle": {
                    "type": "string",
                    "description": "required"
                  },
                  "status": {
                    "type": "string",
                    "description": "required. One of: “success”, “failed”, “in-progress”",
                    "required": [
                      "success",
                      "failed",
                      "in-progress"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "String or sanitized HTML"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/v1/documents/latestPublications": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "public-api:read"
            ]
          }
        ],
        "tags": [
          "Publications"
        ],
        "summary": "Latest Publications",
        "description": "This endpoint is the list equivalent of the previous one. The response is an array of objects with 3 possible top-level properties: systemdata, metadata, content",
        "parameters": [
          {
            "name": "fields",
            "description": "Filters which (comma separated) properties are included in the response. Defaults to `systemdata,metadata,content` (no renditions).",
            "schema": {
              "type": "string",
              "example": "systemdata,metadata,content"
            },
            "in": "query"
          },
          {
            "name": "limit",
            "description": "A limit for how much published documents to retrieve. Defaults to 100. Max. 100.",
            "schema": {
              "type": "integer",
              "minLength": 0,
              "maxLength": 100,
              "example": 100
            },
            "in": "query"
          },
          {
            "name": "offset",
            "description": "An offset into the query. Useful when getting more than 100 results (pagination)",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "reverse",
            "description": "Order publications in ascending order instead of the default descending order. This is useful if you want to paginate using a time based filter.",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "name": "homepage",
            "description": "Return only the document labeled as homepage in the current project.",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "name": "contentTypes",
            "description": "Comma separated list of content types to use as filter.",
            "schema": {
              "type": "string",
              "example": "regular"
            },
            "in": "query"
          },
          {
            "name": "documentTypes",
            "description": "Comma separated list of document types to use as filter.\nCan be one of 'article', 'page', 'data-record'.",
            "schema": {
              "type": "string",
              "example": "article,page,data-record"
            },
            "in": "query"
          },
          {
            "name": "id.gte",
            "description": "Filter by document id range.\n\nSupported filters: 'id.gte', 'id.gt', 'id.lte', 'id.lt'.\n\nThe id range filter is useful if you want to export a lot of documents. You can do many requests in parallel against the api, where you filter by the specific ranges.\n\nThis query is much more flexible than an offset-based filter and works with millions of documents.\n\nRequest 1: ?id.gt=0&id.lte=100\nRequest 2: ?id.gt=100&id.lte=200\nRequest 3: ?id.gt=200&id.lte=300",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "id.gt",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "id.lte",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "id.lt",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "publishedAt.gte",
            "description": "Filter by publish date range.\nSupported filters: 'publishedAt.gte', 'publishedAt.gt', 'publishedAt.lte', 'publishedAt.lt'.\n\nExample: To retrieve all publications since a specific timestamp, use '?reverse&publishedAt.gte=2021-05-01T00:00:00.000Z'",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-01-30T08:30:00Z"
            },
            "in": "query"
          },
          {
            "name": "publishedAt.gt",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-01-30T08:30:00Z"
            },
            "in": "query"
          },
          {
            "name": "publishedAt.lte",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-01-30T08:30:00Z"
            },
            "in": "query"
          },
          {
            "name": "publishedAt.lt",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-01-30T08:30:00Z"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/beta/documents/latestPublications": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "public-api:read"
            ]
          }
        ],
        "tags": [
          "Publications"
        ],
        "summary": "Latest Publications Beta",
        "description": "This endpoint is the list equivalent of the previous one. The response is an array of objects with 4 possible top-level properties: systemdata, metadata, content, references",
        "parameters": [
          {
            "name": "fields",
            "description": "Filters which (comma separated) properties are included in the response. Defaults to `systemdata,metadata,content` (no renditions).",
            "schema": {
              "type": "string",
              "example": "systemdata,metadata,content,references"
            },
            "in": "query"
          },
          {
            "name": "limit",
            "description": "A limit for how much published documents to retrieve. Defaults to 100. Max. 100.",
            "schema": {
              "type": "integer",
              "minLength": 0,
              "maxLength": 100,
              "example": 100
            },
            "in": "query"
          },
          {
            "name": "offset",
            "description": "An offset into the query. Useful when getting more than 100 results (pagination)",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "reverse",
            "description": "Order publications in ascending order instead of the default descending order. This is useful if you want to paginate using a time based filter.",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "name": "homepage",
            "description": "Return only the document labeled as homepage in the current project.",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "name": "contentTypes",
            "description": "Comma separated list of content types to use as filter.",
            "schema": {
              "type": "string",
              "example": "regular"
            },
            "in": "query"
          },
          {
            "name": "documentTypes",
            "description": "Comma separated list of document types to use as filter.\nCan be one of 'article', 'page', 'data-record'.",
            "schema": {
              "type": "string",
              "example": "article,page,data-record"
            },
            "in": "query"
          },
          {
            "name": "id.gte",
            "description": "Filter by document id range.\n\nSupported filters: 'id.gte', 'id.gt', 'id.lte', 'id.lt'.\n\nThe id range filter is useful if you want to export a lot of documents. You can do many requests in parallel against the api, where you filter by the specific ranges.\n\nThis query is much more flexible than an offset-based filter and works with millions of documents.\n\nRequest 1: ?id.gt=0&id.lte=100\nRequest 2: ?id.gt=100&id.lte=200\nRequest 3: ?id.gt=200&id.lte=300",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "id.gt",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "id.lte",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "id.lt",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "publishedAt.gte",
            "description": "Filter by publish date range.\nSupported filters: 'publishedAt.gte', 'publishedAt.gt', 'publishedAt.lte', 'publishedAt.lt'.\n\nExample: To retrieve all publications since a specific timestamp, use '?reverse&publishedAt.gte=2021-05-01T00:00:00.000Z'",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-01-30T08:30:00Z"
            },
            "in": "query"
          },
          {
            "name": "publishedAt.gt",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-01-30T08:30:00Z"
            },
            "in": "query"
          },
          {
            "name": "publishedAt.lte",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-01-30T08:30:00Z"
            },
            "in": "query"
          },
          {
            "name": "publishedAt.lt",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-01-30T08:30:00Z"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v1/documents/{documentId}/latestPublication": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "public-api:read"
            ]
          }
        ],
        "tags": [
          "Publications"
        ],
        "summary": "Latest Publication",
        "description": "Required scope: public-api:read. The response is a JSON object with 4 possible top-level properties: systemdata, metadata, content, renditions",
        "parameters": [
          {
            "name": "documentId",
            "schema": {
              "type": "integer"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "fields",
            "description": "Filters which (comma separated) properties are included in the response. Defaults to 'systemdata,metadata,content,renditions'.",
            "schema": {
              "type": "string",
              "example": "systemdata,metadata,content,renditions"
            },
            "in": "query"
          },
          {
            "name": "renditions",
            "description": "A comma-separated list of rendition handles. Example: ?renditions=web,json",
            "schema": {
              "type": "string",
              "example": "web,json"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/beta/documents/{documentId}/latestPublication": {
      "get": {
        "security": [
          {
            "bearerAuth": [
              "public-api:read"
            ]
          }
        ],
        "tags": [
          "Publications"
        ],
        "summary": "Latest Publication Beta",
        "description": "The response is a JSON object with 5 possible top-level properties: systemdata, metadata, content, renditions, references",
        "parameters": [
          {
            "name": "documentId",
            "schema": {
              "type": "integer"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "fields",
            "description": "Filters which (comma separated) properties are included in the response.",
            "schema": {
              "type": "string",
              "example": "systemdata,metadata,content,renditions,references,"
            },
            "in": "query"
          },
          {
            "name": "renditions",
            "description": "A comma-separated list of rendition handles. Example: ?renditions=web,json",
            "schema": {
              "type": "string",
              "example": "web,json"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v1/sitemaps/index": {
      "get": {
        "tags": [
          "Sitemaps"
        ],
        "summary": "Get a Sitemap Index",
        "description": "",
        "parameters": [
          {
            "name": "baseUrl",
            "description": "Base url of the delivery host",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "required": true
          },
          {
            "name": "contentTypes",
            "description": "A comma-separated list of contentTypes to include in the sitemap. Example: ?contentTypes=regular,pages",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "required": false
          },
          {
            "name": "entriesPerPage",
            "description": "Optional sitemap entry page size. Default 20000",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Sitemap",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SitemapIndex"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Check API Status",
        "description": "",
        "responses": {
          "200": {
            "description": "Status ok"
          }
        }
      }
    },
    "/api/beta/composition/{documentId}": {
      "post": {
        "security": [
          {
            "bearerAuth": [
              "public-api:read"
            ]
          }
        ],
        "tags": [
          "Composition API"
        ],
        "summary": "Compose a publication",
        "description": "The goal of the composition endpoint is to gather all required information to render a document in one endpoint and to work for different rendering strategies (e.g. render from JSON or use the prerendered Html). The composition Api supports rendering Html without any configuration, can preload references in metadata and can return resolved includes as JSON. It offers optimised performance for all those tasks and will replace the RenderPipeline feature. We plan to add additional functionalities like automatic design updates of documents and more to the composition Api in upcoming releases and are open for inputs what we could add.",
        "parameters": [
          {
            "name": "documentId",
            "schema": {
              "type": "integer"
            },
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "fields": [
                    "systemdata",
                    "metadata",
                    "content",
                    "html",
                    "includes",
                    "design"
                  ],
                  "metadata": {
                    "preload": {
                      "myMetadataProp": true
                    }
                  },
                  "resolveIncludes": true,
                  "renderOptions": {
                    "renderDirectiveInfo": true,
                    "decodeHtml": true
                  }
                },
                "properties": {
                  "fields": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "systemdata",
                        "metadata",
                        "content",
                        "html",
                        "includes",
                        "design"
                      ]
                    }
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "preload": {
                        "type": "object"
                      }
                    }
                  },
                  "resolveIncludes": {
                    "type": "boolean"
                  },
                  "renderOptions": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "renderDirectiveInfo": {
                        "type": "boolean"
                      },
                      "decodeHtml": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Livingdocs",
    "url": "http://docs.livingdocs.io"
  },
  "servers": [
    {
      "url": "https://server.livingdocs.io",
      "description": "service"
    },
    {
      "url": "http://localhost:9090/proxy/api",
      "description": "localhost"
    },
    {
      "url": "https://develop.livingdocs.io/proxy/api",
      "description": "develop"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Sitemap": {
        "type": "object",
        "properties": {
          "loc": {
            "type": "string",
            "format": "uri",
            "example": "https://www.livingdocs.io/sitemap.2020-01.xml"
          },
          "lastmod": {
            "type": "string",
            "format": "date-time"
          }
        },
        "xml": {
          "name": "sitemap"
        }
      },
      "SitemapIndex": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Sitemap"
        },
        "xml": {
          "name": "sitemapindex"
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    }
  }
}